<script lang="ts">
	import GitHubSvg from '$lib/imgs/github-dark.svg';
	import Button from '$lib/components/ui/button/button.svelte';
	import { ChevronLeftIcon } from 'lucide-svelte';

	import * as Form from '$lib/components/ui/form';
	import { Input } from '$lib/components/ui/input';
	import { formSchema } from '$lib/schema/schema';
	import { type SuperValidated, superForm } from 'sveltekit-superforms';
	import { zodClient } from 'sveltekit-superforms/adapters';
	import { Loader } from 'lucide-svelte';
	import { toast } from 'svelte-sonner';

	export let data;
	
	let form = superForm(data.form, {
        validators: zodClient(formSchema),
        onSubmit: async ({ cancel }) => {
            isFormLoading = true;
            
            // Appel direct à l'API Laravel
            try {
                // 1. CSRF
                await fetch('http://localhost:8000/sanctum/csrf-cookie', { credentials: 'include' });

                // 2. Authentification
                const endpoint = $formData.isRegister ? ' http://localhost:8000/api/register' : 'http://localhost:8000/api/login';
                const response = await fetch(endpoint, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify($formData),
                    credentials: 'include'
                });
				
                if (!response.ok) throw await response.json();
				const user = await response.json();
				console.log("resUse",user);

                // Redirection ou gestion du succès
                // window.location.href = '/dashboard';

            } catch (error) {
                // Gestion des erreurs
            } finally {
                isFormLoading = false;
                cancel(); // Annule la soumission normale du formulaire
            }
        }
    });

	const { form: formData, enhance } = form;
	let isFormLoading = false;

	const toggleAuthMode = () => {
		$formData.isRegister = !$formData.isRegister;
		$formData.name = ''; // Reset le nom quand on toggle
	};
</script>

<svelte:head>
	<title>{$formData.isRegister ? 'Sign Up' : 'Sign In'} | Svee UI</title>
	<meta name="description" content="Authentication for Svee UI" />
</svelte:head>

<div class="container flex h-screen w-screen flex-col items-center justify-center">
	<Button variant="ghost" href="/" class="absolute left-4 top-4 md:left-8 md:top-8">
		<ChevronLeftIcon class="mr-2 size-4" />
		Back
	</Button>
	
	<div class="mx-auto flex w-full flex-col justify-center gap-6 sm:w-[350px]">
		<div class="flex flex-col gap-2 text-center">
			<h1 class="text-2xl font-semibold tracking-tight">
				{$formData.isRegister ? 'Create Account' : 'Welcome Back'}
			</h1>
			<p class="text-sm text-muted-foreground">
				{$formData.isRegister 
					? 'Register with email and password' 
					: 'Sign in to your account'}
			</p>
		</div>

		<!-- Toggle Auth Mode -->
		<div class="flex items-center justify-center gap-2">
			<button
				type="button"
				on:click={toggleAuthMode}
				class="text-sm text-muted-foreground hover:text-foreground transition-colors"
			>
				{$formData.isRegister 
					? 'Already have an account? Sign In' 
					: 'Need an account? Sign Up'}
			</button>
		</div>

		<!-- Formulaire principal -->
		<form method="POST" use:enhance class="space-y-4">
			<input type="hidden" name="isRegister" bind:value={$formData.isRegister} />

			{#if $formData.isRegister}
				<Form.Field {form} name="name" class="mb-4">
					<Form.Control let:attrs>
						<Input 
							placeholder="Your full name" 
							{...attrs} 
							bind:value={$formData.name} 
						/>
					</Form.Control>
					<Form.FieldErrors />
				</Form.Field>
			{/if}

			<Form.Field {form} name="email" class="mb-4">
				<Form.Control let:attrs>
					<Input 
						type="email" 
						placeholder="name@example.com" 
						{...attrs} 
						bind:value={$formData.email} 
					/>
				</Form.Control>
				<Form.FieldErrors />
			</Form.Field>

			<Form.Field {form} name="password" class="mb-4">
				<Form.Control let:attrs>
					<Input 
						type="password" 
						placeholder="••••••••" 
						{...attrs} 
						bind:value={$formData.password} 
					/>
				</Form.Control>
				<Form.FieldErrors />
			</Form.Field>

			<Form.Button size="sm" class="w-full" disabled={isFormLoading}>
				{#if isFormLoading}
					<Loader class="mr-2 size-4 animate-spin" />
				{/if}
				{$formData.isRegister ? 'Sign Up with Email' : 'Sign In with Email'}
			</Form.Button>
		</form>

		<!-- Séparateur -->
		<div class="relative">
			<div class="absolute inset-0 flex items-center">
				<span class="w-full border-t" />
			</div>
			<div class="relative flex justify-center text-xs uppercase">
				<span class="bg-background px-2 text-muted-foreground">Or continue with</span>
			</div>
		</div>

		<Button on:click={() => {}} variant="outline" disabled={isFormLoading}>
			<img src={GitHubSvg} alt="github" class="mr-2 size-4" />
			Github
		</Button>
	</div>
</div>